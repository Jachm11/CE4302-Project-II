module ALU_Decoder_RV32I
(
	input logic R,
	input logic I,
	input logic U,
	input logic [7:0] decoded_f3,
	input logic f7_eq_0,
	input logic f7_eq_1,
	input logic f7_eq_h20,
	
	output logic [3:0] ALUop
);
	logic R_and_f7_eq_0;
	assign R_and_f7_eq_0 = R && f7_eq_0;

	logic R_and_f7_eq_h20;
	assign R_and_f7_eq_h20 = R && f7_eq_h20;


	logic R_and_f7_eq_0_or_I;
	assign R_and_f7_eq_0_or_I = R_and_f7_eq_0 || I;
	
	logic [14:0] coder_inputs;
		assign coder_inputs[0] = R_and_f7_eq_h20 && f3[0];			// sub
		assign coder_inputs[1] = R_and_f7_eq_0_or_I && f3[4]; 	// xor
		assign coder_inputs[2] = R_and_f7_eq_0_or_I && f3[6];		// or
		assign coder_inputs[3] = R_and_f7_eq_0_or_I && f3[7];		// and
		assign coder_inputs[4] = (R||I) && f3[1] && f7_eq_0;		// sll		
		assign coder_inputs[5] = (R||I) && f3[5] && f7_eq_0;		// srl
		assign coder_inputs[6] = (R||I) && f3[5] && f7_eq_h20;	// sra
		assign coder_inputs[7] = R_and_f7_eq_0_or_I && f3[2];		// slt
		assign coder_inputs[8] = R_and_f7_eq_0_or_I && f3[3];		// sltu
		assign coder_inputs[9] = 1'b0;									// [Unused]
		assign coder_inputs[10] = U;										// Pass B
		assign coder_inputs[11] = 1'b0;									// [Unused]
		assign coder_inputs[12] = 1'b0;									// [Unused]
		assign coder_inputs[13] = R && f3[0] && f7_eq_1;			// mul
		assign coder_inputs[14] = 1'b0;									// [Unused]
		
		Coder_15x4 cod(coder_inputs, ALUop);		

endmodule
