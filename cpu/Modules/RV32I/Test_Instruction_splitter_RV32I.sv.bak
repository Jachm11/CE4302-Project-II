`timescale 1ns/1ns

module Test_Instruction_splitter_RV32I;

  // Define parameters
  parameter TIMEUNIT = 1ns;
  parameter TIMEPRECISION = 1ns;

  // Inputs
  logic [31:0] instruction;

  // Outputs
  logic [6:0] opcode;
  logic [4:0] rd;
  logic [2:0] f3;
  logic [4:0] r1;
  logic [4:0] r2;
  logic [6:0] f7;
  logic [24:0] raw_immediate;

  // Instantiate Instruction_splitter_RV32I module
  Instruction_splitter_RV32I uut (
    .instruction(instruction),
    .opcode(opcode),
    .rd(rd),
    .f3(f3),
    .r1(r1),
    .r2(r2),
    .f7(f7),
    .raw_immediate(raw_immediate)
  );

  // Initial block for testbench
  initial begin
    // Initialize inputs
    instruction = 32'h00000000; // Assuming initial instruction value

    // Apply some test scenarios
    #10;
    instruction = 32'h00234567; // Set instruction to test values

    // Assertions for opcode, rd, f3, r1, r2, f7, and raw_immediate
    assert(opcode === 7'h23) else $fatal("Test Failed: Opcode assertion");
    assert(rd === 5'h12) else $fatal("Test Failed: rd assertion");
    assert(f3 === 3'h4) else $fatal("Test Failed: f3 assertion");
    assert(r1 === 5'h16) else $fatal("Test Failed: r1 assertion");
    assert(r2 === 5'h09) else $fatal("Test Failed: r2 assertion");
    assert(f7 === 7'h4A) else $fatal("Test Failed: f7 assertion");
    assert(raw_immediate === 25'h002345) else $fatal("Test Failed: raw_immediate assertion");

    // Add more test scenarios as needed

    #100; // Finish simulation after 100 time units
    $finish;
  end

  // Add any other necessary simulation setup or monitor blocks here

endmodule
