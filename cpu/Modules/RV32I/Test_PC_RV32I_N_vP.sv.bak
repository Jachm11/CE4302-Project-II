`timescale 1ns / 1ps

module Test_PC_RV32I_N_vP;

  // Parameters
  parameter N = 8;

  // Inputs
  logic [N-1:0] pc_in;
  logic enabler;
  logic clock, async_reset;

  // Outputs
  reg [N-1:0] pc_out;

  // Instantiate the module
  PC_RV32I_N_vP #(N) uut (
    .pc_in(pc_in),
    .enabler(enabler),
    .clock(clock),
    .async_reset(async_reset),
    .pc_out(pc_out)
  );

  // Stimulus generation
  initial begin
    // Test case 1: Default values
    clock = 0; async_reset = 1; enabler = 1; pc_in = 8'h00;
    #10; // Wait for a few clock cycles
    assert_properties(8'h00);

    // Test case 2: Enable the module
    enabler = 1; pc_in = 8'h12;
    #10;
    assert_properties(8'h12);

    // Test case 3: Disable the module
    enabler = 0; pc_in = 8'h34;
    #10;
    assert_properties(8'h12); // pc_out should stay the same

    // Add more test cases as needed...

    $stop; // Stop the simulation
  end

  // Assertion properties
  function assert_properties(expected_pc);
    begin
      // Add assertions for the expected behavior of pc_out
      assert(pc_out == expected_pc) else $fatal("Test failed. pc_out is incorrect.");

      // Print a message indicating a successful test
      $display("Test passed. pc_out = %h", pc_out);
    end
  endfunction

endmodule
