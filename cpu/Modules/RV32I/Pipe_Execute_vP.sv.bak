module Pipe_Execute_vP
(
	input logic [19:0] control_signals_D,
	input logic [31:0] RD1_D,
	input logic [31:0] RD2_D,
	input logic [31:0] PC_D,
	input logic [31:0] Rd_D,
	input logic [31:0] Imm_D,
	input logic [31:0] PC_4_D,
	input logic [4:0] Rs1_D,
	input logic [4:0] Rs2_D,
	
	input logic enabler,
	input clock,
	input async_reset,
	input sync_reset,
	
	input logic [19:0] control_signals_E,
	input logic [31:0] RD1_E,
	input logic [31:0] RD2_E,
	input logic [31:0] PC_E,
	input logic [31:0] Rd_E,
	input logic [31:0] Imm_E,
	input logic [31:0] PC_4_E,
	input logic [4:0] Rs1_E,
	input logic [4:0] Rs2_E,
);

	logic effective_reset;
	logic dfftl_o;	
	DFF_Tri_Latch_vP dfftl(sync_reset, clock, async_reset, dfftl_o);
	assign effective_reset = async_reset && dfftl_o;
	
	always @(posedge clock or negedge effective_reset)
	begin
		if(!effective_reset)
		begin
			control_signals_E	= 0;
			RD1_E					= 0;
			RD2_E					= 0;
			PC_E				 	= 0;
			Rd_E					= 0;
			Imm_E					= 0;
			PC_4_E				= 0;
			Rs1_E					= 0;
			Rs2_E					= 0;
		end
		else if(enabler)
		begin
			control_signals_E	= control_signals_E;
			RD1_E					= RD1_D;
			RD2_E					= RD2_D;
			PC_E				 	= PC_D;
			Rd_E					= Rd_D;
			Imm_E					= Imm_D;
			PC_4_E				= PC_4_D;
			Rs1_E					= Rs1_D;
			Rs2_E					= Rs2_D;
		end
	end

endmodule