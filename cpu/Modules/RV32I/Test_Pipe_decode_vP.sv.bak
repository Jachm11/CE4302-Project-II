module Test_Pipe_decode_vP;

  // Inputs
  logic [31:0] instruction_F;
  logic [31:0] PC_F;
  logic [31:0] PC_plus_4_F;
  logic enabler;
  logic clock;
  logic async_reset;
  logic sync_reset;

  // Outputs
  logic [31:0] instruction_D;
  logic [31:0] PC_D;
  logic [31:0] PC_plus_4_D;

  // Instantiate the module
  Pipe_decode_vP uut (
    .instruction_F(instruction_F),
    .PC_F(PC_F),
    .PC_plus_4_F(PC_plus_4_F),
    .enabler(enabler),
    .clock(clock),
    .async_reset(async_reset),
    .sync_reset(sync_reset),
    .instruction_D(instruction_D),
    .PC_D(PC_D),
    .PC_plus_4_D(PC_plus_4_D)
  );

  // Initial block to apply inputs
  initial begin
    // Test case 1
    enabler = 1;
    instruction_F = 32'hAABBCCDD;
    PC_F = 32'h12345678;
    PC_plus_4_F = PC_F + 4;
    #10; // Wait for a few time units to let the combinational logic settle
    // Assertions
    assert(instruction_D == instruction_F) else $fatal("Test Case 1 Failed");
    assert(PC_D == PC_F) else $fatal("Test Case 1 Failed");
    assert(PC_plus_4_D == PC_plus_4_F) else $fatal("Test Case 1 Failed");

    // Test case 2
    enabler = 0;
    #10;
    // Assertions
    assert(instruction_D == 0) else $fatal("Test Case 2 Failed");
    assert(PC_D == 0) else $fatal("Test Case 2 Failed");
    assert(PC_plus_4_D == 0) else $fatal("Test Case 2 Failed");

    // Add more test cases as needed

    $finish; // Finish simulation
  end

endmodule