module Decode_stage
(
	// Nets

		input logic [31:0] instruction_D,
		input logic [31:0] PC_D,
		
	// Reg files
		input logic [5:0] write_address,
		input logic write_scalar,
		input logic write_vector,
		input logic [127:0] data_bus_W,


	input logic clock,
	input logic async_reset,
	
	output logic [31:0] PC_F,
	output logic [31:0] PC_plus_4_F
);
	// Aux nets
	// Instruction splitter
	logic [6:0] opcode;
	logic [4:0] rd;
	logic [2:0] f3;
	logic [4:0] r1;
	logic [4:0] r2;
	logic [6:0] f7;
	logic [24:0] raw_immediate;

	
	// ???


		
	// -- Modules --
	

	
	
	
	Instruction_splitter_RV32I instruction_splitter
	(
		.instruction(instruction_D),
		
		.opcode(opcode),
		.rd(rd),
		.f3(f3),
		.r1(r1),
		.r2(r2),
		.f7(f7),
		.raw_immediate(raw_immediate)
	);


	Main_Decoder control_unit
	(
		opcode, f3, f7,
		reg_write_D, result_source_D, width_type_D, mem_write_D, alu_op_D, cond_code_D, alu_source_D, jump_D, i_jump_D, branch_D, pc_to_alu_D, memory_transaction_D, immediate_type_D
	);


	Sign_extend_RV32I sign_extend(
		immediate_type_D, raw_immediate,
		immediate_D);


	Adder_N #(.N(32)) adder_branch_prediction(
		PC_D, immediate_D,
		adder_branch_prediction_o);


	Regfile_File_32x32_vN reg_file
	(
		control_signals_W[0], Rs1_D, Rs2_D, Rd_W, mux_result_W_o,
		clock, async_reset,
		RD1_D, RD2_D
	);

	
	
	
endmodule
/*
Fetch_stage fs
(
	// Nets	
	
	// mux de eleccion de PC
		// select
		.pc_src_select_E(),
		// Channels
		.PC_plus_P4_E(),
		.alu_result_E(),

	// Reg PC
		// Enabler
		.enable_fetch(),
	
	// Mux de prediccion
		// Select
		/branch_prediction_E(),
		// Channels
		.predicted_PC_D(),

	.clock(),
	.async_reset(),
	
	.PC_F(),
	.PC_plus_4_F()
);
*/